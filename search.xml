<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>英语单词记忆法总结记录</title>
      <link href="/2025/04/08/EN/1/"/>
      <url>/2025/04/08/EN/1/</url>
      
        <content type="html"><![CDATA[<p>以下文字仅为我个人的经验和体会，单纯作为背单词方法交流使用，若有不适，请立即退出。</p><h1 id="一阶段预备">一阶段：预备</h1><p>一开始学英语死记硬背是可以的。</p><p>比如你小学的时候记<strong>apple</strong>这个单词，你就死记硬背“诶屁屁挨饿意”，在嘴里念个十几二十遍，也就肌肉记忆把这个单词记住了。</p><p>但这种记忆法并非长久之计，若想记忆得更快更好应该尽早跳过。</p><h1 id="二阶段积累">二阶段：积累</h1><p>第二阶段最重要的就是<strong>从字母背诵转读音背诵</strong>。</p><p>此时你应该上了初中，学校教了音标的知识，<strong>apple</strong>要记忆成/ˈæpəl/，即<strong>通过音节来记忆</strong>。</p><p><strong>建立单词读音（音标）与单词拼写的映射关系是这一阶段非常重要的开始。</strong></p><p>比如，<strong>photo</strong>中的ph发/f/音，<strong>tree</strong>的ee发/iː/音，<strong>play</strong>的ay发/eɪ/音。更多的，<strong>th</strong>发/θ/或/ð/，<strong>sh</strong>发/ʃ/，<strong>ch</strong>发/tʃ/，<strong>oi</strong>和oy发/ɔɪ/，<strong>tion</strong>发/ʃən/音…</p><p>造成的结果就是，当你看到一个新词的时候，你可以猜出它的读音。比如<strong>congregation</strong>，你应该能轻松猜出它的读音是/ˌkɒŋɡrɪˈɡeɪʃən/，甚至你还能猜到他的重音。而一旦你记住了它的读音，你就能通过读音到拼写的逆映射关系把他给写出来。</p><p>读音背诵法将会贯穿第二阶段全部，是<strong>最为核心的记忆法</strong>。我们会在这一时期会停留很长时间。</p><p>同时在第二阶段，随着词汇量增加，我们应该积极探索其他的记忆法：</p><p>（以下罗列我较常使用的的方法）</p><h2 id="一编故事顺口溜含义联想">一、编故事/顺口溜/含义联想</h2><p>这一类都是去建立单词含义与含义之间的联系。</p><p>我背<strong>clinch</strong>这个单词是去编了一个故事：两个人相见，先“拥抱”，后“握手”，然后“达成协议”（联想通讯协议中的握手），然后既然已经达成协议了，于是“最终解决”了问题，这样就一下子把<strong>clinch</strong>的四个含义都记住了。</p><ul><li>背<strong>graze</strong>我会说：“放牧”的时候不小心“擦伤”了。</li><li>背<strong>scramble</strong>我会说：“攀登”着去“争抢”山顶。</li><li>背<strong>domesticate</strong>我会说：把他“驯养”得“使爱家”了。</li><li>背<strong>congregation</strong>我会说：在“教堂”里“集合”了“人群”。</li></ul><p>又比如我背<strong>provision</strong>是编了一个顺口溜：准备提供粮食条款。</p><ul><li>背<strong>doom</strong>我会说：注定毁灭。</li><li>背<strong>segment</strong>我会说：分割片段。</li><li>背<strong>wit</strong>我会说：机智风趣的人。</li><li>背<strong>crow</strong>我会说：乌鸦啼叫自鸣得意。</li><li>背<strong>multitude</strong>我会说：大量的群众。</li><li>背<strong>implement</strong>我会说：实施工具。</li></ul><p>含义联想也可以归在这一类。背<strong>comb</strong>我是记住了“梳子”这个含义，然后由梳子引申为“梳理”，再联想为“搜寻”。</p><ul><li>背<strong>terrace</strong>我是记住了“平台”这个含义，然后联想为“梯田”和“阳台”。</li><li>背<strong>gust</strong>我是记住了“狂风”，狂风肯定会“猛刮”，这就好比情感的“爆发”。</li><li>背<strong>plank</strong>我是记住了“厚木板”，然后联想到厚厚的“zg条目”。</li><li>背<strong>crutch</strong>我是记住了“拐杖”，然后联想到“支柱”。</li></ul><p>对于一些固定搭配也同样可以这样。</p><ul><li>背<strong>a sketchof</strong>我知道<strong>sketch</strong>是伸展、延伸，那么一个延伸肯定就是“一大片”的意思嘛。</li><li>背<strong>down andout</strong>我想又低又出去的，肯定就是“穷困潦倒的”嘛。</li></ul><h2 id="二变形记忆单词组合">二、变形记忆/单词组合</h2><p>这个和第一类都是通过“联想”来记忆，不同的是<strong>上一类是词语本身、词内含义的联想，而这个第二类是词与词、词间含义的联想</strong>。</p><p>动词变名词变形容词变副词，你变我我变你，变来变去。这玩意儿你应该能想到一大堆吧，我就不举例了。</p><p>我一般是<strong>以动词或名词为”基本词“发散去记其他词</strong>的，但同时要注意发散的时候词语的意思可能会改变，此时就需要更多的联想发散了，而不是没脑子的理所当然。</p><ul><li>比如<strong>grief</strong>是悲痛，<strong>grieve</strong>是使悲痛，但是<strong>grievance</strong>的意思就变成了委屈、不满。</li><li>比如<strong>specify</strong>是指定、详细说明，但<strong>specific</strong>是具体的、明确的，<strong>specification</strong>是规格、规范。</li><li>比如<strong>exception</strong>是例外、除外，但<strong>exceptional</strong>是卓越的、特别的（不过这个其实也不难联想，毕竟你把所有人都排除在外了、和他们格格不入了，你肯定是独特的存在）。同样的，<strong>distinguish</strong>是区分，而<strong>distinguished</strong>是卓越的、出众的。</li><li>比如<strong>crack</strong>是破裂、裂痕，但<strong>cracking</strong>是极好的、优秀的。</li><li>比如<strong>conserve</strong>是保护，<strong>conservation</strong>也是保护，但<strong>conservatory</strong>是温室、艺术学校。</li><li>比如<strong>defend</strong>是防御、防守，<strong>defender</strong>是防御者、防守队员，但<strong>defendant</strong>是被告。</li><li>比如<strong>sense</strong>是感觉，<strong>sensation</strong>是感觉，但<strong>sensational</strong>是轰动的、极好的</li><li>比如<strong>space</strong>是空间，<strong>spacial</strong>是空间的，但<strong>spacious</strong>是宽敞的、广阔的。</li></ul><p>但同时，你也可能会因为这些变形，而去记忆这些单词的所谓的熟词生义。</p><ul><li>由<strong>specifics</strong>是具体细节、特效药的意思，得知<strong>specific</strong>的名词意思。</li><li>由<strong>intrigued</strong>有感兴趣的形容词意思，得知<strong>intrigue</strong>除了有密谋，还有对…感兴趣的意思。</li><li>由<strong>ruling</strong>有裁决、判决的名词意思，得知<strong>rule</strong>除了规则、统治，还有裁决的意思。</li><li>由<strong>affectation</strong>是假装的名词意思，得知<strong>affect</strong>除了影响、感动，还有假装的动词意思。</li><li>由<strong>deposition</strong>是沉积物的意思，得知<strong>deposit</strong>除了存款，还有沉积、沉淀的动词意思。</li></ul><p>以及通过词语的组合来猜测含义也可以归到这一类。</p><ul><li>比如<strong>converse</strong>通过<strong>conversation</strong>和<strong>reverse</strong>联想到交谈；相反的；相反的言论。</li><li>比如<strong>devoid</strong>通过<strong>void</strong>联想到全无的，缺乏的。</li><li>比如<strong>windfall</strong>通过风吹掉的东西联想到意外之财。</li><li>比如<strong>overhead</strong>通过悬在头上之物联想到企业经营费用。</li><li>比如<strong>enlist</strong>通过进入名单联想到入伍、寻求帮助。</li></ul><p>不过这里和词根词缀又有交叉的地方，不必纠结到底是什么类别，你理解我的意思就行。</p><h2 id="三例句固定搭配词组">三、例句/固定搭配/词组</h2><p>例句尽量短而精悍。例句是、固定搭配非常重要的，这些都是“案例”，如果你记忆过这些案例，当你再次读到和听到这些案例的时候，你可以快速反应过来。</p><ul><li>比如<strong>civil</strong>这个词，<strong>civilaviation</strong>是民用航空，<strong>civilprocedure</strong>是民事诉讼，<strong>civillaw</strong>是民法，<strong>civilservant</strong>是公务员，<strong>civilwar</strong>是内战，<strong>civilengineer</strong>是土木工程师。如果积累了这些“案例”，你就可以快速反应过来，而不是先想civil的含义，然后再慢慢去对应、看怎么延伸和发展含义来翻译更合适。</li></ul><p>例句也同样如此，都是提供一个“案例”，或者叫做提供一个“上下文环境”。</p><ul><li>比如<strong>lapse</strong>这个词，<strong>lapseinto</strong>陷入，<strong>a lapse of the tougue</strong>失言，<strong>alapse in judgement</strong>判断失误，<strong>a momentarylapse</strong>一时疏忽，<strong>after a lapse of twoyears</strong>过了两年，<strong>a time lapse</strong>时间间隔。</li><li>比如<strong>require</strong>d这个词， <strong>requiredreading</strong>必读物，<strong>requiredskills</strong>必备技能，<strong>requireddate</strong>规定日期，<strong>required subject</strong>必修课。</li><li>比如<strong>even</strong>这个词，<strong>evendistribution</strong>均匀分布，<strong>evenpressure</strong>均匀压力，<strong>evenroad</strong>平坦的道路，<strong>breakeven</strong>收支平衡，<strong>even the score</strong>拉平比分。</li></ul><p>不过这里和熟词生义又有交叉的地方，不必纠结到底是什么类别，你理解我的意思就行。</p><h2 id="四英语释义">四、英语释义</h2><p>我常用的是韦氏词典（网页）、欧路词典（软件），当你觉得中文解释不满意或者很模糊的时候就去看英文释义。</p><ul><li>比如<strong>contain</strong>除了有包含，还有抑制、阻止的意思，但是抑制、阻止意思的单词有很多啊，区别是什么呢？然后我就去查英文释义：<br>1、control emotion: to keep an emotion under control<br>2、stop something spreading: to restrict the movement, spread, orinfluence of a strong enemy, force, disease, or idea</li></ul><p>这下知道<strong>contain</strong>做抑制、阻止的意思是指：抑制情绪和阻止强大的敌人、力量、疾病或想法的运动、传播或影响。</p><h2 id="五一义多词近义词辨析">五、一义多词/近义词辨析</h2><p>比如抑制、激烈的、协议、指控、任命、假装、欺骗这些中文含义是一样的，但是英文单词却可能有好多个，整理到一起方便记忆和比较。所谓近义词辨析也可以算在这里面。（刷某书经常能刷到这种帖子，然后再来个投票的那种，起号小技巧hh）</p><h2 id="六词根词缀">六、词根词缀</h2><p>随着词汇量变大会积累一些常见的词根词缀，但是不要刻意去记忆新的，而是应该在背过的单词里总结。</p><ul><li>比如，你不应该是因为pre-这个词缀而去记忆<strong>prelude</strong>，而是因为背单词背到了<strong>prelude</strong>而用他的pre-词缀来辅助记忆。（<strong>prelude</strong>前奏，pre-表示“在…之前”或“预先”）</li><li>比如，你不应该是因为-ee这个词根去记忆<strong>devotee</strong>，而是因为背单词背到了<strong>devotee</strong>而用他的-ee词根来辅助记忆。（<strong>devotee</strong>信徒，-ee表示“被动者”或“受动作影响的人”）</li></ul><h2 id="七形近词">七、形近词</h2><p>比如<strong>delicate</strong>和<strong>dedicate，anguish</strong>、<strong>languish</strong>和<strong>languid</strong>，<strong>announce</strong>、<strong>denounce</strong>、<strong>renounce</strong>和<strong>pronounce</strong>，<strong>vigorous</strong>和<strong>rigorous</strong>，<strong>faculty</strong>和<strong>facility</strong>。这个很多了，你知道我在说什么。</p><h2 id="八熟词生义一词多义">八、熟词生义/一词多义</h2><p>考研很喜欢考熟词生义，可以结合前面的方法来记忆。</p><ul><li>比如我通过<strong>a slip of thepen/tongue</strong>（笔误/口误）来记忆<strong>slip</strong>（错误）的意思。</li><li>比如我通过<strong>a graphicaldescription</strong>（生动的描述）来记忆<strong>graphical</strong>（生动的）的意思。</li><li>比如我通过<strong>a commonmyth</strong>（常见误区）和英文释义：false belief: a widely held butmistaken belief来记忆<strong>myth</strong>（错误看法）的意思。</li><li>比如<strong>recall</strong>我可以通过“回想”这个熟义，去联想“召回”，再进一步由“召回”联想到“撤销”。</li><li>比如<strong>picture</strong>我通过“图片”这个熟义，联想到他作为动词的时候应该是“想象”的意思。</li></ul><p>一词多义也可以包含在这一类。</p><h1 id="三阶段扩充">三阶段：扩充</h1><p>然后就是下一个阶段，比如补充词根词缀、补充拉丁文（我并未到这一阶段所以我也只是猜测哈）。到这个阶段的你词汇量已经非常非常大了，你只是需要更多的方式来帮你扩充词汇量以及提高对英语的理解，注意这个时期的需要和我们所在第二时期的需要已经不一样了（这一阶段叫做扩充，上一阶段叫做积累），所以一定不要本末倒置。同时在这个时期背单词可能已经没有用了，经常在某书上面刷到墨墨词汇量2w的大佬删软件说再见的，就是因为这个时候纯背单词已经没用了，而是应该转向更广泛的阅读当中了。</p><h1 id="其他不推荐的方法">其他：不推荐的方法</h1><p><strong>不推荐谐音法</strong>。比如某英语考研老师<strong>splash</strong>的死不拉屎记忆法。</p><p><strong>不推荐象形法</strong>。比如把<strong>statistic</strong>的t想象成连在一起的表格。</p><p><strong>不推荐看图背单词</strong>。比如某词斩。</p><h1 id="写在最后">写在最后</h1><p>在上面这些这些方法中，“基本词”和“案例”这两个是我最近才感悟出来并不断践行的，大概是我背到8k左右出现的感悟。</p><p><strong>此篇文章作为我背单词的阶段总结。</strong></p>]]></content>
      
      
      <categories>
          
          <category> 英语 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 背单词 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Butterfly魔改8：添加文章搜索功能并调整导航位置</title>
      <link href="/2025/04/08/CS/Hexo/Butterfly/Custom/8/"/>
      <url>/2025/04/08/CS/Hexo/Butterfly/Custom/8/</url>
      
        <content type="html"><![CDATA[<h1 id="添加搜索功能">添加搜索功能</h1><p>在根目录下安装插件<code>npm install hexo-generator-search --save</code></p><p>然后去<code>_config.yml</code>中启用<code>local_search</code>即可</p><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">search:</span></span><br><span class="line">  <span class="attr">use:</span> <span class="string">local_search</span></span><br><span class="line">  <span class="attr">placeholder:</span></span><br></pre></td></tr></table></figure><h1 id="调整位置">调整位置</h1><p>buterfly的搜索添加之后是默认在最后的，以及这个是和导航分开来的（如下图所示）</p><p><img src="/img/202504/23.png" alt="Image 23"></p><p>所以我没法简单的把搜索图标弄到最后面去，以及我懒得去找<code>.pug</code>了（一些不好的回忆），索性直接用js来操作好了（这样还不用伤到模板文件）</p><p>请先完成<a href="./0.md">魔改准备工作</a>，然后在<code>\themes\butterfly\source\js\custom.js</code>最后添加如下代码：</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">document</span>.<span class="title function_">addEventListener</span>(<span class="string">'DOMContentLoaded'</span>, <span class="keyword">function</span>(<span class="params"></span>) {</span><br><span class="line">  <span class="keyword">var</span> searchButton = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">'search-button'</span>);</span><br><span class="line">  <span class="keyword">var</span> menusItems = <span class="variable language_">document</span>.<span class="title function_">querySelectorAll</span>(<span class="string">'.menus_items'</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (searchButton &amp;&amp; menusItems.<span class="property">length</span> &gt; <span class="number">0</span>) {</span><br><span class="line">    <span class="comment">// 获取 menusItems 的克隆节点</span></span><br><span class="line">    <span class="keyword">var</span> menusItemsClone = menusItems[<span class="number">0</span>].<span class="title function_">cloneNode</span>(<span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 将克隆节点插入到 searchButton 之前</span></span><br><span class="line">    searchButton.<span class="property">parentNode</span>.<span class="title function_">insertBefore</span>(menusItemsClone, searchButton);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 删除所有的 menusItems 元素</span></span><br><span class="line">    menusItems.<span class="title function_">forEach</span>(<span class="keyword">function</span>(<span class="params">item</span>) {</span><br><span class="line">      item.<span class="property">parentNode</span>.<span class="title function_">removeChild</span>(item);</span><br><span class="line">    });</span><br><span class="line">  }</span><br><span class="line">});</span><br></pre></td></tr></table></figure><p>这段代码的目的是将页面上第一个 class 为 menus_items的元素克隆一份，插入到 id 为 search-button 的元素之前，然后删除所有class 为 menus_items 的元素。这可以用来改变页面上元素的排列顺序，并且避免出现重复的元素。</p>]]></content>
      
      
      <categories>
          
          <category> 计算机 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> Butterfly </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Butterfly魔改7：修改首页导航内容和图标</title>
      <link href="/2025/04/08/CS/Hexo/Butterfly/Custom/7/"/>
      <url>/2025/04/08/CS/Hexo/Butterfly/Custom/7/</url>
      
        <content type="html"><![CDATA[<p>首页导航配置在<code>_config.yml</code>中<code>manu</code>下修改：</p><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">menu:</span></span><br><span class="line">  <span class="string">开往:</span> <span class="string">https://www.travellings.cn/go.html</span> <span class="string">||</span> <span class="string">fas</span> <span class="string">fa-subway</span></span><br><span class="line">  <span class="string">主页:</span> <span class="string">/</span> <span class="string">||</span> <span class="string">fas</span> <span class="string">fa-home</span></span><br><span class="line">  <span class="string">博文</span> <span class="string">||</span> <span class="attr">fa fa-graduation-cap:</span></span><br><span class="line">    <span class="string">分类:</span> <span class="string">/categories/</span> <span class="string">||</span> <span class="string">fa</span> <span class="string">fa-archive</span></span><br><span class="line">    <span class="string">标签:</span> <span class="string">/tags/</span> <span class="string">||</span> <span class="string">fa</span> <span class="string">fa-tags</span></span><br><span class="line">    <span class="string">归档:</span> <span class="string">/archives/</span> <span class="string">||</span> <span class="string">fa</span> <span class="string">fa-folder-open</span></span><br></pre></td></tr></table></figure><p>buterfly导航图标默认用的是 <strong>Font Awesome图标库</strong>，格式如下：</p><ul><li>Solid 图标（fas）：实心图标，如 <code>fas fa-home</code></li><li>Regular 图标（far）：空心图标，如 <code>far fa-heart</code></li><li>Brands 图标（fab）：品牌图标，如 <code>fab fa-github</code></li></ul><p>查找图标去官网 <a href="https://fontawesome.com.cn/v5，搜索即可" class="uri">https://fontawesome.com.cn/v5，搜索即可</a></p><p><img src="/img/202504/22.png" alt="Image 22"></p><p>值得注意的是，如果你是直接在buterfly的主题文件夹下的<code>_config.yml</code>中修改的配置，修改完之后你可以直接刷新浏览器查看；而如果你是在最外层文件夹新建了一个<code>_config.butterfly.yml</code>，那么你每次修改都需要重新<code>hexo s</code>才能查看</p>]]></content>
      
      
      <categories>
          
          <category> 计算机 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> Butterfly </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>如何使用git本地回档</title>
      <link href="/2025/04/07/CS/git/1/"/>
      <url>/2025/04/07/CS/git/1/</url>
      
        <content type="html"><![CDATA[<h1 id="起因">起因</h1><p>写博客，某一次<code>hexo d</code>不知道什么情况，我的<code>img</code>丢失了（似乎是<code>hexo clean</code>导致的，存疑），正好学习一下使用<code>git</code>回档</p><h1 id="步骤">步骤</h1><p>1、进入包含<code>.git</code>文件，打开<code>git bash</code>，输入<code>git log --oneline</code>可以看到历史提交记录</p><p><strong>注</strong>：如果提交记录过长，退出分页模式，按<code>q</code></p><p><img src="/img/202504/15.png" alt="Image 15"></p><p>2、在github网站上，可以查看回档的具体的文件</p><p><img src="/img/202504/16.png" alt="Image 16"></p><p><img src="/img/202504/17.png" alt="Image 17"></p><p><img src="/img/202504/18.png" alt="Image 18"></p><p>按理来说，网页端应该也可以回档，但是我没找到在哪里，索性就用本地仓库回档吧</p><p>3、本地执行<code>git reset --hard bd739f1</code>，这个是硬重置，删掉的文件会回到本地目录，但同时所有的提交就没有了</p><p><img src="/img/202504/19.png" alt="Image 19"></p><p>而<code>git reset --soft bd739f1</code>是软重置，仅仅是撤销提交commit，但保留工作目录和暂存区的更改</p><p><img src="/img/202504/20.png" alt="Image 20"></p><p><img src="/img/202504/21.png" alt="Image 21"></p>]]></content>
      
      
      <categories>
          
          <category> 计算机 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Butterfly魔改6：修改透明背景和主题色</title>
      <link href="/2025/04/07/CS/Hexo/Butterfly/Custom/6/"/>
      <url>/2025/04/07/CS/Hexo/Butterfly/Custom/6/</url>
      
        <content type="html"><![CDATA[<h1 id="前言">前言</h1><p>浏览本篇之前，请先完成<a href="./0.md">魔改准备工作</a></p><h1 id="修改透明背景">修改透明背景</h1><p>在<code>_config.yml</code>中找到：</p><p>1、<code>footer_img</code>：网页最下面那个版权信息的块改成透明</p><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># The background image of footer</span></span><br><span class="line"><span class="attr">footer_img:</span> <span class="string">transparent</span></span><br></pre></td></tr></table></figure><p>2、<code>background</code>改成和封面一样的图片</p><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Website Background</span></span><br><span class="line"><span class="comment"># Can set it to color or image url</span></span><br><span class="line"><span class="attr">background:</span> <span class="string">/img/2.png</span></span><br></pre></td></tr></table></figure><p>3、<code>mask</code>蒙版效果，这个看个人喜好</p><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Add a mask to the header and footer</span></span><br><span class="line"><span class="attr">mask:</span></span><br><span class="line">  <span class="attr">header:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">footer:</span> <span class="string">ture</span></span><br></pre></td></tr></table></figure><p>4、<code>enter_transitions</code>关闭，不然会有白色渐变效果</p><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Page Transition</span></span><br><span class="line"><span class="attr">enter_transitions:</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure><p>5、在<code>\themes\butterfly\source\css\custom.css</code>最后添加如下代码：</p><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*侧边卡片的透明度 */</span></span><br><span class="line"><span class="selector-pseudo">:root</span> {</span><br><span class="line">  <span class="attr">--card-bg</span>: <span class="built_in">rgba</span>(<span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, .<span class="number">8</span>);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="selector-attr">[data-theme=<span class="string">"dark"</span>]</span> {</span><br><span class="line">  <span class="attr">--card-bg</span>: <span class="built_in">rgba</span>(<span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">0.2</span>);</span><br><span class="line">}</span><br></pre></td></tr></table></figure><h1 id="修改主题色">修改主题色</h1><p>在<code>_config.yml</code>中找到<code>theme_color</code>把<code>enable</code>改成<code>true</code>，颜色可参考下面</p><p>网站可选择：<a href="https://www.sioe.cn/yingyong/yanse-rgb-16/" class="uri">https://www.sioe.cn/yingyong/yanse-rgb-16/</a>，注意十六进制大小写都是一样的</p><p><img src="/img/202504/14.png" alt="Image 14" width="50%"></p>]]></content>
      
      
      <categories>
          
          <category> 计算机 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> Butterfly </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>双系统windows时间显示不对</title>
      <link href="/2025/04/06/CS/Linux/6/"/>
      <url>/2025/04/06/CS/Linux/6/</url>
      
        <content type="html"><![CDATA[<h1 id="原因">原因</h1><p>linux会自动把BIOS改成伦敦时间（GMT+0），windows不知道，错把BIOS当成北京时间（GMT+8），所以windows上的时间会晚8个小时</p><h1 id="解决">解决</h1><p>管理员身份打开终端，输入<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Reg add HKLM\SYSTEM\CurrentControlSet\Control\TimeZoneInformation /v RealTimeIsUniversal /t REG_DWORD /d 1</span><br></pre></td></tr></table></figure></p><h1 id="代码学习">代码学习</h1><p><code>Reg add HKLM\SYSTEM\CurrentControlSet\Control\TimeZoneInformation /v RealTimeIsUniversal /t REG_DWORD /d 1</code></p><ul><li><code>Reg add</code>: 这是Windows命令行工具 reg.exe的一个命令，用于向注册表中添加新的键或值。</li><li><code>HKLM\SYSTEM\CurrentControlSet\Control\TimeZoneInformation</code>:这是注册表路径。<ul><li><code>HKLM</code> 代表"HKEY_LOCAL_MACHINE"，它是注册表的一个根键，包含计算机的全局设置。</li><li><code>SYSTEM\CurrentControlSet\Control\TimeZoneInformation</code>是该根键下的一个子键，专门用于存储时区相关的信息。</li></ul></li><li><code>/v RealTimeIsUniversal</code>: 这指定要添加或修改的值的名称。<ul><li><code>/v</code> 表示 "value name"。</li><li><code>RealTimeIsUniversal</code> 是一个注册表值的名称。</li></ul></li><li><code>/t REG_DWORD</code>: 这指定值的类型。<ul><li><code>/t</code> 表示 "value type"。</li><li><code>REG_DWORD</code> 表示这是一个 32 位 DWORD值，通常用于存储整数。</li></ul></li><li><code>/d 1</code>: 这指定要设置的数据。<ul><li><code>/d</code> 表示 "value data"。</li><li><code>1</code> 是要写入 RealTimeIsUniversal 的值。</li></ul></li><li>这行命令的作用是在注册表的<code>HKLM\SYSTEM\CurrentControlSet\Control\TimeZoneInformation</code>路径下，创建一个名为 RealTimeIsUniversal 的 DWORD 值，并将其设置为1。</li></ul><p><strong>RealTimeIsUniversal 的含义：</strong></p><p>RealTimeIsUniversal 这个注册表值控制 Windows 如何解释硬件时钟（RealTime Clock，RTC）。</p><p><strong>如果 RealTimeIsUniversal 设置为 1，则 Windows认为硬件时钟存储的是 UTC（协调世界时）时间。</strong></p><p>如果 RealTimeIsUniversal 设置为 0（或不存在），则 Windows认为硬件时钟存储的是本地时间。</p>]]></content>
      
      
      <categories>
          
          <category> 计算机 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
            <tag> ubuntu </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ubuntu安装cuda驱动</title>
      <link href="/2025/04/05/CS/Linux/5/"/>
      <url>/2025/04/05/CS/Linux/5/</url>
      
        <content type="html"><![CDATA[<h1 id="一安装nvidia-driver">一、安装nvidia-driver</h1><p>运行 <code>ubuntu-drivers devices</code></p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">(base) diraw@solitude:~$ ubuntu-drivers devices</span><br><span class="line">== /sys/devices/pci0000:00/0000:00:01.0/0000:01:00.0 ==</span><br><span class="line">modalias : pci:v000010DEd00002520sv00001043sd00001CBCbc03sc00i00</span><br><span class="line">vendor   : NVIDIA Corporation</span><br><span class="line">model    : GA106M [GeForce RTX 3060 Mobile / Max-Q]</span><br><span class="line">driver   : nvidia-driver-570-server-open - distro non-free</span><br><span class="line">driver   : nvidia-driver-550-open - distro non-free</span><br><span class="line">driver   : nvidia-driver-545 - distro non-free</span><br><span class="line">driver   : nvidia-driver-470-server - distro non-free</span><br><span class="line">driver   : nvidia-driver-570-server - distro non-free</span><br><span class="line">driver   : nvidia-driver-535-open - distro non-free</span><br><span class="line">driver   : nvidia-driver-470 - distro non-free</span><br><span class="line">driver   : nvidia-driver-535 - distro non-free</span><br><span class="line">driver   : nvidia-driver-550 - distro non-free recommended</span><br><span class="line">driver   : nvidia-driver-545-open - distro non-free</span><br><span class="line">driver   : nvidia-driver-535-server - distro non-free</span><br><span class="line">driver   : nvidia-driver-535-server-open - distro non-free</span><br><span class="line">driver   : xserver-xorg-video-nouveau - distro free <span class="built_in">builtin</span></span><br></pre></td></tr></table></figure><p>其中550版本被标记为<code>recommended</code></p><p>运行<code>sudo apt install nvidia-driver-550</code></p><p>之后会让你输入密码，完成之后<code>sudo reboot</code>，出现下图：</p><p><img src="/img/202504/6.png" alt="Image 6"></p><p>选择第二行<code>Enroll MOK</code>，然后出现下图：</p><p><img src="/img/202504/7.png" alt="Image 7"></p><p>选择<code>continue</code></p><p><img src="/img/202504/8.png" alt="Image 8"></p><p>然后选择<code>reboot</code></p><p>重启之后，运行<code>nvidia-smi</code>，预期出现下图，右上角为所支持的最大版本cuda，我这个为12.04</p><p><img src="/img/202504/9.png" alt="Image 9"></p><h1 id="二安装cuda-toolkit">二、安装CUDA Toolkit</h1><blockquote><p>不能（？存疑）通过<code>sudo apt install nvidia-cuda-toolkit</code>安装，会出现版本不一致的情况，使用<code>sudo apt purge nvidia-cuda-toolkit</code>，然后使用<code>sudo apt autoremove</code>，卸载apt 安装的 CUDA</p></blockquote><p>去 <a href="https://developer.nvidia.com/cuda-toolkit-archive，选择12.04" class="uri">https://developer.nvidia.com/cuda-toolkit-archive，选择12.04</a></p><p><img src="/img/202504/10.png" alt="Image 10"></p><p>然后选择你的配置</p><p><img src="/img/202504/11.png" alt="Image 11"></p><p>然后把下面的代码走一遍</p><p><img src="/img/202504/12.png" alt="Image 12"></p><p>传统内核模块:可能与旧系统或需要传统驱动结构的特定软件具有更好的兼容性。</p><p>开放内核模块:使用开源内核模块，可以更好地与 Linux内核集成，潜在地提高安全性并加快更新速度。</p><p>这里选择第二个，以及如果第一步操作了，nvidia-driver已经安装了，执行第二条即可</p><p><img src="/img/202504/13.png" alt="Image 13"></p><p>检查成功：<code>nvcc --version</code></p><h1 id="三添加环境变量">三、添加环境变量</h1><p><code>nano ~/.bashrc</code></p><p>添加以下行到文件末尾</p><p><code>export CUDA_HOME=/usr/local/cuda export PATH=$CUDA_HOME/bin:$PATH export LD_LIBRARY_PATH=$CUDA_HOME/lib64:$LD_LIBRARY_PATH</code></p><p>应用更改<code>source ~/.bashrc</code></p>]]></content>
      
      
      <categories>
          
          <category> 计算机 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
            <tag> ubuntu </tag>
            
            <tag> cuda </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>重装ubuntu初始化</title>
      <link href="/2025/04/05/CS/Linux/4/"/>
      <url>/2025/04/05/CS/Linux/4/</url>
      
        <content type="html"><![CDATA[<p><strong>1、安装clash</strong> <a href="https://app.chongjin01.icu/Linux/" class="uri">https://app.chongjin01.icu/Linux/</a></p><p>dpkg出现依赖错误，使用<code>sudo apt install -f</code></p><p><strong>2、安装QQ</strong> <a href="https://im.qq.com/linuxqq/index.shtml" class="uri">https://im.qq.com/linuxqq/index.shtml</a></p><p><strong>3、安装vscode</strong> <a href="https://diraw.top/2025/04/04/CS/Linux/2/" class="uri">https://diraw.top/2025/04/04/CS/Linux/2/</a></p><p><strong>4、安装flameshot</strong> <a href="https://github.com/flameshot-org/flameshot" class="uri">https://github.com/flameshot-org/flameshot</a></p><p>设置-键盘-快捷键，命令为<code>flameshot gui</code></p><p><strong>5、安装输入法</strong></p><p>SunPinYin：<code>sudo apt-get install ibus-sunpinyin</code></p><p><strong>6、安装anaconda</strong> <a href="https://www.anaconda.com/download/success" class="uri">https://www.anaconda.com/download/success</a></p><p>记得最后把conda添加到环境变量，如果忘了话执行：<code>eval "$(/home/diraw/anaconda3/bin/conda shell.bash hook)"</code></p><p>镜像源：</p><p>pip：<code>pip config set global.index-url https://pypi.tuna.tsinghua.edu.cn/simple</code></p><p>conda：注：由于更新过快难以同步，我们不同步pytorch-nightly，pytorch-nightly-cpu，ignite-nightly这三个包。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">conda config --add channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/free/</span><br><span class="line">conda config --add channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/main/</span><br><span class="line">conda config --add channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud/pytorch/</span><br><span class="line">conda config --add channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud/pytorch/linux-64/</span><br><span class="line">conda config --set show_channel_urls yes</span><br></pre></td></tr></table></figure><p><strong>7、安装cuda驱动</strong> <a href="https://diraw.top/2025/04/05/CS/Linux/5/" class="uri">https://diraw.top/2025/04/05/CS/Linux/5/</a></p>]]></content>
      
      
      <categories>
          
          <category> 计算机 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
            <tag> ubuntu </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>如何缩短Linux终端中显示的用户名前缀</title>
      <link href="/2025/04/04/CS/Linux/3/"/>
      <url>/2025/04/04/CS/Linux/3/</url>
      
        <content type="html"><![CDATA[<h1 id="问题描述">问题描述</h1><p><img src="/img/202504/2.png" alt="Image 2"></p><p>新装的ubuntu，这个终端的名称也太长了，主要是@后面这个设备名，所以我想把这玩意儿改短一些</p><h1 id="解决办法">解决办法</h1><p>打开<code>~/.bashrc</code>文件，找到如下内容：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> [ <span class="string">"<span class="variable">$color_prompt</span>"</span> = <span class="built_in">yes</span> ]; <span class="keyword">then</span></span><br><span class="line">    PS1=<span class="string">'${debian_chroot:+($debian_chroot)}\[\033[01;32m\]\u@\h\[\033[00m\]:\[\033[01;34m\]\w\[\033[00m\]\$ '</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    PS1=<span class="string">'${debian_chroot:+($debian_chroot)}\u@\h:\w\$ '</span></span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure><ul><li><code>${debian_chroot:+($debian_chroot)}</code>：这是一个参数扩展。如果设置了 debian_chroot 变量，则将其值包含在提示符中，并用括号括起来。这通常用于在 chroot 环境中指示当前环境。 如果 debian_chroot未设置，则此部分不显示任何内容。<ul><li>用echo命令输出：<code>echo "${debian_chroot:+($debian_chroot)}"</code></li></ul></li></ul><p><img src="/img/202504/3.png" alt="Image 3"></p><ul><li>\u：用户的用户名（例如，"diraw"）</li><li>@：一个字面字符 "@"</li><li>\h：主机名（hostname）的第一个部分，即第一个 . 之前的字符串。例如，如果主机名是 mycomputer.example.com，则 显示 mycomputer<ul><li>在终端输出主机名：<code>hostname</code></li></ul></li></ul><p><img src="/img/202504/4.png" alt="Image 4"></p><ul><li>:：一个字面字符 ":"</li><li>\w：当前工作目录的完整路径</li><li><code>\$</code>：如果当前用户是 root 用户，则显示 #；否则，显示$</li></ul><p>我这里修改我的hostname即可</p><p>1、直接 <code>sudo hostnamectl set-hostname 新主机名</code></p><p>2、然后打开<code>/etc/hosts</code>，把第二行名称改一下</p><p><img src="/img/202504/5.png" alt="Image 5"></p><p>3、重启电脑</p><p><strong>为什么需要同时修改这两个地方？</strong></p><p>1、<code>sudo hostnamectl set-hostname 新主机名</code> →修改系统的静态主机名（存储在 <code>/etc/hostname</code>）<br>2、修改 <code>/etc/hosts</code> → 确保本地域名解析正确，避免某些程序（如sudo、ping、ssh）出现警告或错误</p><h1 id="代码学习">代码学习</h1><p>PS1 代表 "Prompt String"，是一个 Bash shell环境变量，它定义了命令提示符的格式。简单来说，PS1决定了你在终端中看到的内容，即你输入命令之前显示的字符串。</p><p>Bash 还有其他提示符变量，如 PS2（用于多行命令）、PS3（用于 select循环）和 PS4（用于调试）。</p><p>PS1 字符串中可以使用许多特殊字符（也称为转义序列），它们会被 Bash解释并替换为实际值。 一些常见的特殊字符包括：<br>- \u：用户名<br>- \h：主机名（hostname）的第一个部分<br>- \H：完整的主机名<br>- \w：当前工作目录的完整路径（~ 代表用户主目录）<br>- \W：当前工作目录的basename（最后一个目录名）<br>- <code>\$</code>：如果当前用户是 root 用户，则显示 #；否则，显示$<br>- \d：当前日期（例如，"Tue May 9"）<br>- \t：当前时间（24 小时制，HH:MM:SS）<br>- \s：shell 的名称</p>]]></content>
      
      
      <categories>
          
          <category> 计算机 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
            <tag> ubuntu </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>在ubuntu上面安装vscode需注意的</title>
      <link href="/2025/04/04/CS/Linux/2/"/>
      <url>/2025/04/04/CS/Linux/2/</url>
      
        <content type="html"><![CDATA[<h1 id="问题描述">问题描述</h1><p><strong>不要直接在ubuntu自带的应用商店上下载vscode</strong>！因为中文输入法会有问题，输入法会显示在vscode左下角，很别扭。网上有的是无法用拼音输入汉字。</p><h1 id="解决办法">解决办法</h1><p>解决办法参考<a href="https://blog.csdn.net/m0_44999129/article/details/123125650">Ubuntu20.04中VScode不能输入中文解决</a></p><p>1、去应用商店中卸载vscode</p><p>2、使用apt安装vscode</p><ul><li><code>sudo apt update</code></li><li><code>sudo apt install software-properties-common apt-transport-https wget</code></li><li>使用命令插入Microsoft GPGkey：<code>wget -q https://packages.microsoft.com/keys/microsoft.asc -O- | sudo apt-key add -</code></li><li>启动vscode源仓库：<code>sudo add-apt-repository "deb [arch=amd64] https://packages.microsoft.com/repos/vscode stable main"</code></li><li>安装vscode：<code>sudo apt install code</code></li></ul><p>wakatime：<a href="https://wakatime.com/settings/api-key" class="uri">https://wakatime.com/settings/api-key</a></p><h1 id="代码学习">代码学习</h1><p>1、<code>sudo apt install software-properties-common apt-transport-https wget</code></p><ul><li>sudo: 以超级用户权限运行命令。安装软件包通常需要超级用户权限，因为这会修改系统文件。</li><li>apt: 这是 Debian 和 Ubuntu 系统上的命令行包管理器。它用于安装、更新和删除软件包。</li><li>install: 这是 apt 命令的一个子命令，用于安装一个或多个软件包。</li><li>software-properties-common:这个软件包提供了一些用于管理软件源的工具。 它包含 add-apt-repository命令，该命令用于添加新的 APT 软件源。这对于安装来自非官方仓库的软件包非常有用。</li><li>apt-transport-https: 这个软件包允许 apt 通过 HTTPS 协议访问软件源。这对于确保软件包的安全性非常重要，因为 HTTPS 可以防止中间人攻击。</li><li>wget: 这是一个命令行下载工具，用于从 Web 服务器下载文件。在某些情况下，可能需要使用 wget 来下载软件包或配置文件。</li><li>这条命令的作用是使用 apt 包管理器安装software-properties-common、apt-transport-https 和 wget 这三个软件包。这些软件包通常用于添加和管理软件源，并通过 HTTPS 安全地下载软件包。</li></ul><p>2、<code>wget -q https://packages.microsoft.com/keys/microsoft.asc -O- | sudo apt-key add -</code></p><ul><li>wget: 这是一个命令行下载工具，用于从 Web 服务器下载文件。</li><li>-q 或 --quiet: 静默模式。 wget 不会显示进度条或错误消息。</li><li><a href="https://packages.microsoft.com/keys/microsoft.asc" class="uri">https://packages.microsoft.com/keys/microsoft.asc</a>:这是要下载的文件的 URL。 在这个例子中，它是一个包含 Microsoft GPG 公钥的ASCII 文件。</li><li>-O-: 将下载的文件输出到标准输出 (stdout)。 -O选项用于指定输出文件名，而 - 表示标准输出。</li><li><div class="line-block">(管道): 将 wget 的标准输出连接到 sudoapt-key add - 命令的标准输入。 这意味着 wget 下载的公钥将被传递给apt-key add 命令。</div></li><li>sudo: 以超级用户权限运行命令。 添加 APT密钥通常需要超级用户权限，因为这会修改系统范围的配置。</li><li>apt-key: 这是一个用于管理 APT 密钥的工具。 APT密钥用于验证软件包的真实性。</li><li>add: 这是 apt-key 命令的一个子命令，用于添加一个新的密钥。</li><li>-: 从标准输入读取密钥。 由于 wget 的输出通过管道连接到 apt-key的输入，因此 apt-key 将从 wget 下载的公钥添加到密钥环中。</li><li>但<strong>apt-key 命令已被弃用</strong>，现在多使用 gpg 和 apt-get命令来管理 APT 密钥</li></ul><p>3、<code>sudo add-apt-repository "deb [arch=amd64] https://packages.microsoft.com/repos/vscode stable main"</code></p><ul><li>sudo: 以超级用户权限运行命令。修改系统范围的软件源列表需要超级用户权限。</li><li>add-apt-repository: 这是一个用于添加新的 APT 软件源的命令。 它通常由software-properties-common 软件包提供。</li><li>"deb [arch=amd64] <a href="https://packages.microsoft.com/repos/vscode" class="uri">https://packages.microsoft.com/repos/vscode</a> stablemain": 这是一个字符串，指定要添加的软件源的详细信息。</li><li>deb: 指定这是一个 Debian 软件包的软件源。</li><li>[arch=amd64]: 指定此软件源仅适用于 amd64 架构的系统。 amd64 是 64 位x86 处理器的常用架构名称。 如果你的系统是其他架构（例如arm64），则需要修改此选项。</li><li><a href="https://packages.microsoft.com/repos/vscode" class="uri">https://packages.microsoft.com/repos/vscode</a>:这是软件源的 URL。 在这个例子中，它是 Microsoft Visual Studio Code (VSCode) 的软件源。</li><li>stable: 指定要使用的软件源的发行版。 在这个例子中，它使用 stable分支，该分支包含 VS Code 的稳定版本。</li><li>main: 指定软件源的组件。 main组件包含由软件源维护者提供的自由软件。</li><li>这条命令的作用是向你的 APT 软件源列表中添加 Microsoft VS Code的软件源，并且只适用于 amd64 架构的系统。 添加此软件源后，你可以使用 apt命令来安装和更新 VS Code。</li></ul>]]></content>
      
      
      <categories>
          
          <category> 计算机 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
            <tag> ubuntu </tag>
            
            <tag> vscode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>如何在ubuntu上面安装hexo</title>
      <link href="/2025/04/04/CS/Linux/1/"/>
      <url>/2025/04/04/CS/Linux/1/</url>
      
        <content type="html"><![CDATA[<h1 id="设备信息">设备信息</h1><p>22.04.1-Ubuntu</p><h1 id="安装步骤">安装步骤</h1><p>安装过程参考<a href="https://hexo.io/zh-cn/docs/">官方文档</a></p><p>1、安装git：<code>sudo apt-get install git-core</code></p><p>2、安装node.js（Node.js 是一个开源、跨平台的 JavaScript运行时环境）</p><p>node.js的安装过程参考<a href="https://github.com/nodesource/distributions">官方文档</a></p><ul><li>安装curl（curl是一个命令行工具，通常用于从服务器下载文件、向服务器发送数据、测试 API端点等）：<code>sudo apt-get install -y curl</code></li><li>下载node.js环境setup脚本：<code>curl -fsSL https://deb.nodesource.com/setup_23.x -o nodesource_setup.sh</code></li><li>运行setup脚本：<code>sudo -E bash nodesource_setup.sh</code></li><li>安装node.js：<code>sudo apt-get install -y nodejs</code></li><li>查看版本：<code>node -v</code></li></ul><p>3、安装hexo：<code>npm install -g hexo-cli</code></p><ul><li>如果出现如下图 EACCES 错误，查看本文下一部分内容</li></ul><p><img src="/img/202504/1.png" alt="Image 1"></p><h1 id="解决eacces报错">解决EACCES报错</h1><p>解决过程参看<a href="https://docs.npmjs.com/resolving-eacces-permissions-errors-when-installing-packages-globally">官方文档</a></p><p>1、在根目录下创建文件夹：<code>mkdir -p ~/.npm-global/lib</code><br>2、设置config：<code>npm config set prefix '~/.npm-global'</code><br>3、打开<code>~/.profile</code>文件，在末尾添加<code>export PATH=~/.npm-global/bin:$PATH</code><br>4、更新环境变量：<code>source ~/.profile</code></p><h1 id="代码学习">代码学习</h1><p>1、<code>curl -fsSL https://deb.nodesource.com/setup_23.x -o nodesource_setup.sh</code></p><ul><li>curl: 这是命令本身，调用 curl 工具。、</li><li>-f 或 --fail: 告诉 curl 如果 HTTP 请求失败（服务器返回 4xx 或 5xx状态码），则不输出 HTML 错误页面，而是直接退出并返回错误。这对于在脚本中使用 curl时非常有用，因为你可以根据退出代码来判断请求是否成功。</li><li>-s 或 --silent: 静默模式。 curl 不会显示进度条或错误消息。这对于在脚本中使用 curl时也很有用，因为你可能不想让输出干扰脚本的执行。</li><li>-S 或 --show-error: 与 -s 结合使用。即使在静默模式下，如果发生错误，curl 仍然会显示错误消息。这可以帮助你诊断问题。</li><li>-L 或 --location: 如果服务器返回一个重定向 (3xx 状态码)，curl会自动跟随重定向。 这对于下载重定向的文件非常有用。</li><li><a href="https://deb.nodesource.com/setup_23.x" class="uri">https://deb.nodesource.com/setup_23.x</a>:这是要下载的文件的 URL。 在这个例子中，它是一个用于设置 Node.js 23.x版本的脚本。</li><li>-o nodesource_setup.sh 或 --output nodesource_setup.sh:指定将下载的文件保存为 nodesource_setup.sh。 如果没有这个选项，curl会将文件内容输出到标准输出（通常是你的终端）。</li></ul><p>2、<code>sudo -E bash nodesource_setup.sh</code></p><ul><li>-E 默认情况下，sudo会清除大部分当前用户的环境变量，以确保以干净的环境运行命令。 -E 选项告诉sudo 保留当前用户的所有环境变量</li></ul><p>3、<code>npm install -g hexo-cli</code></p><ul><li>npm: 这是 Node Package Manager 的命令，用于管理 Node.js</li><li>-g 或 --global: 这个选项告诉 npm 将包全局安装到你的系统中。 这意味着hexo-cli 将被安装到一个全局目录，并且可以在任何地方通过命令行访问。如果没有这个选项，hexo-cli 将被安装到当前项目的 node_modules目录中，只能在当前项目中使用</li></ul>]]></content>
      
      
      <categories>
          
          <category> 计算机 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> linux </tag>
            
            <tag> ubuntu </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo部署twikoo功能时MongoDB报错：tlsv1 alert internal error</title>
      <link href="/2025/01/07/CS/Hexo/Error/2/"/>
      <url>/2025/01/07/CS/Hexo/Error/2/</url>
      
        <content type="html"><![CDATA[<p>如下所示：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">{</span><br><span class="line">    "code": 1000,</span><br><span class="line">    "message": "80D8C13E607F0000:error:0A000438:SSL routines:ssl3_read_bytes:tlsv1 alert internal error:ssl/record/rec_layer_s3.c:907:SSL alert number 80\n"</span><br><span class="line">}</span><br></pre></td></tr></table></figure><p>这个是使用SSL/TLS连接的时候出现了错误，之后我发现是MongoDB防火墙的问题<sub>（虽然我记得初始化的时候命明明设置了0.0.0.0/0的，但不知道为什么没设置成功）</sub></p><p><strong>解决步骤</strong>：进入MongoDB面板-左侧选择<code>Network Access</code>-点击右侧<code>ADD IP ADDRESS</code>-添加<code>0.0.0.0/0</code>即可</p><p>这是再重新访问MongoDB即恢复正常：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">{</span><br><span class="line">    "code": 100,</span><br><span class="line">    "message": "Twikoo 云函数运行正常，请参考 https://twikoo.js.org/frontend.html 完成前端的配置",</span><br><span class="line">    "version": "1.6.41"</span><br><span class="line">}</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 计算机 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> twikoo </tag>
            
            <tag> MongoDB </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Butterfly魔改5：在网站底部添加建站时间</title>
      <link href="/2025/01/05/CS/Hexo/Butterfly/Custom/5/"/>
      <url>/2025/01/05/CS/Hexo/Butterfly/Custom/5/</url>
      
        <content type="html"><![CDATA[<h1 id="前言">前言</h1><p>看<a href="https://butterfly.js.org/posts/4aa8abbe/?highlight=anchor#%E8%A8%AA%E5%95%8F%E4%BA%BA%E6%95%B8-busuanzi-UV-%E5%92%8C-PV">官方文档的时候</a>，明明busuanzi是有个“网站已运行时间的”，但是这里就没有。那就自己弄一个吧，这玩意儿看着感觉还是挺有成就感的。</p><h1 id="步骤">步骤</h1><p>在 <code>\themes\butterfly\layout\includes\footer.pug</code>的最后添加如下代码即可：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// Add the time calculation script</span><br><span class="line">div</span><br><span class="line">span#timeDate 载入天数...</span><br><span class="line">span#times 载入时分秒...</span><br><span class="line">script.</span><br><span class="line">    var now = new Date(); </span><br><span class="line">    function createtime() { </span><br><span class="line">    var grt = new Date("1/2/2025 21:36"); // 在此处修改你的建站时间</span><br><span class="line">    now.setTime(now.getTime() + 250); </span><br><span class="line">    days = (now - grt) / 1000 / 60 / 60 / 24; </span><br><span class="line">    dnum = Math.floor(days); </span><br><span class="line">    hours = (now - grt) / 1000 / 60 / 60 - (24 * dnum); </span><br><span class="line">    hnum = Math.floor(hours); </span><br><span class="line">    if (String(hnum).length == 1) { hnum = "0" + hnum; } </span><br><span class="line">    minutes = (now - grt) / 1000 / 60 - (24 * 60 * dnum) - (60 * hnum); </span><br><span class="line">    mnum = Math.floor(minutes); </span><br><span class="line">    if (String(mnum).length == 1) { mnum = "0" + mnum; } </span><br><span class="line">    seconds = (now - grt) / 1000 - (24 * 60 * 60 * dnum) - (60 * 60 * hnum) - (60 * mnum); </span><br><span class="line">    snum = Math.round(seconds); </span><br><span class="line">    if (String(snum).length == 1) { snum = "0" + snum; } </span><br><span class="line">    document.getElementById("timeDate").innerHTML = "本网站已运行 " + dnum + " 天 "; </span><br><span class="line">    document.getElementById("times").innerHTML = hnum + " 小时 " + mnum + " 分 " + snum + " 秒"; </span><br><span class="line">    } </span><br><span class="line">    setInterval(createtime, 250);</span><br></pre></td></tr></table></figure><p>不想要显示“秒”的话：<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">div</span><br><span class="line">  span#timeDate 载入天数...</span><br><span class="line">  span#times 载入时分...</span><br><span class="line">  script.</span><br><span class="line">    var now = new Date(); </span><br><span class="line">    function createtime() { </span><br><span class="line">      var grt = new Date("1/2/2025 21:36"); // 在此处修改你的建站时间</span><br><span class="line">      now.setTime(now.getTime() + 250); </span><br><span class="line">      days = (now - grt) / 1000 / 60 / 60 / 24; </span><br><span class="line">      dnum = Math.floor(days); </span><br><span class="line">      hours = (now - grt) / 1000 / 60 / 60 - (24 * dnum); </span><br><span class="line">      hnum = Math.floor(hours); </span><br><span class="line">      if (String(hnum).length == 1) { hnum = "0" + hnum; } </span><br><span class="line">      minutes = (now - grt) / 1000 / 60 - (24 * 60 * dnum) - (60 * hnum); </span><br><span class="line">      mnum = Math.floor(minutes); </span><br><span class="line">      if (String(mnum).length == 1) { mnum = "0" + mnum; } </span><br><span class="line">      document.getElementById("timeDate").innerHTML = "本网站已运行 " + dnum + " 天 "; </span><br><span class="line">      document.getElementById("times").innerHTML = hnum + " 小时 " + mnum + " 分"; </span><br><span class="line">    } </span><br><span class="line">    setInterval(createtime, 250);</span><br></pre></td></tr></table></figure></p><p>只想显示“天”的话：<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">div</span><br><span class="line">  span#timeDate 载入天数...</span><br><span class="line">  script.</span><br><span class="line">    var now = new Date(); </span><br><span class="line">    function createtime() { </span><br><span class="line">      var grt = new Date("1/2/2025 21:36"); // 在此处修改你的建站时间</span><br><span class="line">      now.setTime(now.getTime() + 250); </span><br><span class="line">      days = (now - grt) / 1000 / 60 / 60 / 24; </span><br><span class="line">      dnum = Math.floor(days); </span><br><span class="line">      document.getElementById("timeDate").innerHTML = "本网站已运行 " + dnum + " 天"; </span><br><span class="line">    } </span><br><span class="line">    setInterval(createtime, 250);</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      <categories>
          
          <category> 计算机 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> Butterfly </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Butterfly魔改准备工作：文件管理魔改代码</title>
      <link href="/2025/01/04/CS/Hexo/Butterfly/Custom/0/"/>
      <url>/2025/01/04/CS/Hexo/Butterfly/Custom/0/</url>
      
        <content type="html"><![CDATA[<h1 id="前言">前言</h1><p>对于一些全局的改变，我们可以用文件来管理更方便。</p><h1 id="步骤">步骤</h1><ol type="1"><li>在 <code>\themes\butterfly\source\css</code> 目录下添加<code>custom.css</code> 文件</li><li>在 <code>\themes\butterfly\source\js</code> 目录下添加<code>custom.js</code> 文件</li><li>在内层 <code>_config.yml</code> 文件中搜索 <code>inject</code>或者直接在外层 <code>_config.butterfly.yml</code>文件中添加如下代码即可：</li></ol><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Inject</span></span><br><span class="line"><span class="comment"># Insert the code to head (before '&lt;/head&gt;' tag) and the bottom (before '&lt;/body&gt;' tag)</span></span><br><span class="line"><span class="attr">inject:</span></span><br><span class="line">  <span class="attr">head:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">&lt;link</span> <span class="string">rel="stylesheet"</span> <span class="string">href="/css/custom.css"&gt;</span></span><br><span class="line">  <span class="attr">bottom:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">&lt;script</span> <span class="string">src="/js/custom.js"&gt;&lt;/script&gt;</span></span><br></pre></td></tr></table></figure><p>之后，对于一些全局的修改都可以在 <code>custom.css</code> 和<code>custom.js</code> 中编辑，这样管理和更新的时候方便些。</p>]]></content>
      
      
      <categories>
          
          <category> 计算机 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> Butterfly </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Butterfly魔改4：自动检测深色/浅色模式</title>
      <link href="/2025/01/04/CS/Hexo/Butterfly/Custom/4/"/>
      <url>/2025/01/04/CS/Hexo/Butterfly/Custom/4/</url>
      
        <content type="html"><![CDATA[<h1 id="前言">前言</h1><p>添加功能：根据系统的深色/浅色模式，自动切换网站的深色/浅色模式。</p><h1 id="方法1">方法1</h1><p>在 <code>\themes\butterfly\layout\includes\head.pug</code>的最后添加如下代码：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">script.</span><br><span class="line">  function updateTheme() {</span><br><span class="line">    const isDarkMode = window.matchMedia('(prefers-color-scheme: dark)').matches;</span><br><span class="line">    document.documentElement.setAttribute('data-theme', isDarkMode ? 'dark' : 'light');</span><br><span class="line">  }</span><br><span class="line"></span><br><span class="line">  // 初始设置</span><br><span class="line">  updateTheme();</span><br><span class="line"></span><br><span class="line">  // 监听系统主题变化</span><br><span class="line">  window.matchMedia('(prefers-color-scheme: dark)').addEventListener('change', updateTheme);</span><br></pre></td></tr></table></figure><h1 id="方法2推荐">方法2（推荐）</h1><p>先跟着<a href="https://diraw.top/2025/01/04/Hexo/Butterfly/Custom/0/">Butterfly魔改准备工作：文件管理魔改代码</a>完成准备。</p><p>在 <code>custom.js</code> 最后（最外层）直接添加如下代码即可，也就是<code>.pug</code> 文件去掉最前面的 <code>script.</code> 即可：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">updateTheme</span>(<span class="params"></span>) {</span><br><span class="line">  <span class="keyword">const</span> isDarkMode = <span class="variable language_">window</span>.<span class="title function_">matchMedia</span>(<span class="string">'(prefers-color-scheme: dark)'</span>).<span class="property">matches</span>;</span><br><span class="line">  <span class="variable language_">document</span>.<span class="property">documentElement</span>.<span class="title function_">setAttribute</span>(<span class="string">'data-theme'</span>, isDarkMode ? <span class="string">'dark'</span> : <span class="string">'light'</span>);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">// 初始设置</span></span><br><span class="line"><span class="title function_">updateTheme</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 监听系统主题变化</span></span><br><span class="line"><span class="variable language_">window</span>.<span class="title function_">matchMedia</span>(<span class="string">'(prefers-color-scheme: dark)'</span>).<span class="title function_">addEventListener</span>(<span class="string">'change'</span>, updateTheme);</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 计算机 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> Butterfly </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Butterfly魔改3：修改副标题字体大小</title>
      <link href="/2025/01/03/CS/Hexo/Butterfly/Custom/3/"/>
      <url>/2025/01/03/CS/Hexo/Butterfly/Custom/3/</url>
      
        <content type="html"><![CDATA[<h1 id="前言">前言</h1><p>众所周知，Butterfly在可以在 <code>_config.yml</code> 中用<code>font</code> 配置全局的字体和代码大小，如下图所示：</p><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Global font settings</span></span><br><span class="line"><span class="comment"># Don't modify the following settings unless you know how they work</span></span><br><span class="line"><span class="attr">font:</span></span><br><span class="line">  <span class="attr">global_font_size:</span> <span class="string">16px</span></span><br><span class="line">  <span class="attr">code_font_size:</span> <span class="string">16px</span></span><br><span class="line">  <span class="attr">font_family:</span></span><br><span class="line">  <span class="attr">code_font_family:</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Font settings for the site title and site subtitle</span></span><br><span class="line"><span class="attr">blog_title_font:</span></span><br><span class="line">  <span class="attr">font_link:</span></span><br><span class="line">  <span class="attr">font_family:</span></span><br></pre></td></tr></table></figure><p>但是一些更精细的调整就没有了。就比如我把全局大小设置成16px之后，我感觉我首页的副标题的中文字体有点大了，我想改小一点。</p><h1 id="步骤">步骤</h1><p>在 <code>\themes\butterfly\layout\includes\header\index.pug</code>中搜索 <code>site-subtitle</code> 可以找到：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#site-subtitle</span><br><span class="line">    span#subtitle</span><br></pre></td></tr></table></figure><p>添加 <code>(style="font-size: 22px;")</code> 即可，如下图所示：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#site-subtitle(style="font-size: 22px;")</span><br><span class="line">    span#subtitle</span><br></pre></td></tr></table></figure><p>改之前：<br><img src="/img/202501/6.png" alt="Image 6"></p><p>改之后：<br><img src="/img/202501/7.png" alt="Image 7"></p>]]></content>
      
      
      <categories>
          
          <category> 计算机 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> Butterfly </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Butterfly魔改2：页面渐变切换</title>
      <link href="/2025/01/03/CS/Hexo/Butterfly/Custom/2/"/>
      <url>/2025/01/03/CS/Hexo/Butterfly/Custom/2/</url>
      
        <content type="html"><![CDATA[<h1 id="准备工作">准备工作</h1><p>这边使用Pjax来实现页面的动画。Butterfly内置了Pjax插件，直接在<code>/themes/butterfly/_config.yml</code> 中搜索Pjax，然后把<code>enable</code> 选项改成 <code>true</code>，如下所示：</p><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># https://github.com/MoOx/pjax</span></span><br><span class="line"><span class="attr">pjax:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="comment"># Exclude the specified pages from pjax, such as '/music/'</span></span><br><span class="line">  <span class="attr">exclude:</span></span><br><span class="line">    <span class="comment"># - /xxxxxx/</span></span><br></pre></td></tr></table></figure><h1 id="步骤">步骤</h1><p>首先，在 <code>/themes/butterfly/source/css</code> 下创建<code>custom.css</code> 写入如下代码：</p><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 默认（白天模式） */</span></span><br><span class="line"><span class="selector-tag">body</span> {</span><br><span class="line">  <span class="attribute">background-color</span>: white;</span><br><span class="line">  <span class="attribute">color</span>: black;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="selector-attr">[data-theme=<span class="string">"dark"</span>]</span> <span class="selector-tag">body</span> {</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#121212</span>;</span><br><span class="line">  <span class="attribute">color</span>: white;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.pjax-leave-active</span> {</span><br><span class="line">  <span class="attribute">opacity</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: inherit;</span><br><span class="line">  <span class="comment">/* 使用继承的背景色 */</span></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.pjax-enter-active</span> {</span><br><span class="line">  <span class="attribute">transition</span>: opacity <span class="number">1s</span> <span class="built_in">cubic-bezier</span>(<span class="number">0.22</span>, <span class="number">0.61</span>, <span class="number">0.36</span>, <span class="number">1</span>), background-color <span class="number">1s</span> ease-in-out, transform <span class="number">1s</span> ease-in-out;</span><br><span class="line">  <span class="attribute">opacity</span>: <span class="number">1</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: inherit;</span><br><span class="line">  <span class="comment">/* 使用继承的背景色 */</span></span><br><span class="line">}</span><br></pre></td></tr></table></figure><p>然后，在 <code>/themes/butterfly/source/js</code> 下创建<code>custom.js</code> 写入如下代码：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">document</span>.<span class="title function_">addEventListener</span>(<span class="string">'DOMContentLoaded'</span>, <span class="keyword">function</span> (<span class="params"></span>) {</span><br><span class="line">  <span class="keyword">if</span> (<span class="variable language_">window</span>.<span class="property">Pjax</span>) {</span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">Pjax</span>({</span><br><span class="line">      <span class="attr">elements</span>: <span class="string">'a'</span>,</span><br><span class="line">      <span class="attr">selectors</span>: [<span class="string">'title'</span>, <span class="string">'.content'</span>],</span><br><span class="line">      <span class="attr">cacheBust</span>: <span class="literal">false</span></span><br><span class="line">    });</span><br><span class="line"></span><br><span class="line">    <span class="variable language_">document</span>.<span class="title function_">addEventListener</span>(<span class="string">'pjax:send'</span>, <span class="keyword">function</span> (<span class="params"></span>) {</span><br><span class="line">      <span class="variable language_">document</span>.<span class="property">body</span>.<span class="property">classList</span>.<span class="title function_">add</span>(<span class="string">'pjax-leave-active'</span>);</span><br><span class="line">    });</span><br><span class="line"></span><br><span class="line">    <span class="variable language_">document</span>.<span class="title function_">addEventListener</span>(<span class="string">'pjax:complete'</span>, <span class="keyword">function</span> (<span class="params"></span>) {</span><br><span class="line">      <span class="variable language_">document</span>.<span class="property">body</span>.<span class="property">classList</span>.<span class="title function_">remove</span>(<span class="string">'pjax-leave-active'</span>);</span><br><span class="line">      <span class="variable language_">document</span>.<span class="property">body</span>.<span class="property">classList</span>.<span class="title function_">add</span>(<span class="string">'pjax-enter-active'</span>);</span><br><span class="line">      <span class="built_in">setTimeout</span>(<span class="keyword">function</span> (<span class="params"></span>) {</span><br><span class="line">        <span class="variable language_">document</span>.<span class="property">body</span>.<span class="property">classList</span>.<span class="title function_">remove</span>(<span class="string">'pjax-enter-active'</span>);</span><br><span class="line">      }, <span class="number">500</span>);</span><br><span class="line">    });</span><br><span class="line">  }</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 切换主题的示例代码</span></span><br><span class="line">  <span class="keyword">const</span> toggleThemeButton = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">'toggle-theme'</span>);</span><br><span class="line">  toggleThemeButton.<span class="title function_">addEventListener</span>(<span class="string">'click'</span>, <span class="keyword">function</span> (<span class="params"></span>) {</span><br><span class="line">    <span class="keyword">const</span> htmlElement = <span class="variable language_">document</span>.<span class="property">documentElement</span>;</span><br><span class="line">    <span class="keyword">const</span> currentTheme = htmlElement.<span class="title function_">getAttribute</span>(<span class="string">'data-theme'</span>);</span><br><span class="line">    <span class="keyword">const</span> newTheme = currentTheme === <span class="string">'dark'</span> ? <span class="string">'light'</span> : <span class="string">'dark'</span>;</span><br><span class="line">    htmlElement.<span class="title function_">setAttribute</span>(<span class="string">'data-theme'</span>, newTheme);</span><br><span class="line">  });</span><br><span class="line">});</span><br></pre></td></tr></table></figure><p>最后，在 <code>/themes/butterfly/_config.yml</code> 中搜索<code>inject</code>，或者直接在外部的 <code>_config.butterfly.yml</code>里面添加如下代码：</p><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">inject:</span></span><br><span class="line">  <span class="attr">head:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">&lt;link</span> <span class="string">rel="stylesheet"</span> <span class="string">href="/css/custom.css"&gt;</span></span><br><span class="line">  <span class="attr">bottom:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">&lt;script</span> <span class="string">src="/js/custom.js"&gt;&lt;/script&gt;</span></span><br></pre></td></tr></table></figure><h1 id="调试动画">调试动画</h1><p>调试的时候，可以直接在浏览器的 <code>F12</code>下修改动画效果，也就是 <code>cubic-bezier(0.22, 0.61, 0.36, 1)</code>贝塞尔曲线，可以直接看见图片：</p><p><img src="/img/202501/5.png" alt="Image 5"></p>]]></content>
      
      
      <categories>
          
          <category> 计算机 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> Butterfly </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Butterfly魔改1：首页大图预加载</title>
      <link href="/2025/01/03/CS/Hexo/Butterfly/Custom/1/"/>
      <url>/2025/01/03/CS/Hexo/Butterfly/Custom/1/</url>
      
        <content type="html"><![CDATA[<h1 id="前言">前言</h1><p>众所周知，Butterfly的首页大图可以通过在 <code>_config.yml</code>文件中中配置 <code>index_img</code> 选项来实现。</p><p>但是如果你用的是GitHubPages来部署的，而你配置的首页大图的大小又有好几M，不算太小的话，有时候访问网站就会出现——<strong>先加载Butterfly框架出来，此时首页大图是蓝色的默认背景，然后才逐渐把你配置的大图加载出来</strong>——的这种情况。</p><p>我不喜欢这种情况，因为我希望别人一进网站就<strong>被我的首页大图震撼</strong>(bushi)，如果图片是慢慢加载出来的话就没有那种震撼感了，甚至说体验感比较一般。所以我准备对Butterfly的源码魔改一波。</p><p>以下是Butterfly官方网站的加载情况，可以看到这个图片逐渐加载的现象：</p><p><img src="/img/202501/1.png" alt="Image 1"></p><p><img src="/img/202501/2.png" alt="Image 2"></p><p><img src="/img/202501/3.png" alt="Image 3"></p><h1 id="方法1">方法1</h1><p>现在我们来魔改一下源代码，以实现图片预加载的功能。</p><p>打开 <code>themes/butterfly/layout/includes/layout.pug</code>这个文件，在 <code>body</code> 的最前面添加如下代码：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">body(style="visibility: hidden; overflow: hidden;")</span><br><span class="line"></span><br><span class="line">    !=partial('includes/loading/index', {}, {cache: true})</span><br></pre></td></tr></table></figure><p>然后还是这个文件，拉到文件最后，会看到如下两行：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">include ./rightside.pug</span><br><span class="line">include ./additional-js.pug</span><br></pre></td></tr></table></figure><p>在 <code>include ./additional-js.pug</code> 之前添加如下代码：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">script.</span><br><span class="line">    window.onload = function() {</span><br><span class="line">    document.body.style.visibility = 'hidden';</span><br><span class="line">    document.body.style.overflow = 'hidden';</span><br><span class="line">    var fullPageElement = document.querySelector('.full_page, .post-bg');</span><br><span class="line"></span><br><span class="line">    if (fullPageElement) {</span><br><span class="line">        //- console.log('Full-page element detected.');</span><br><span class="line"></span><br><span class="line">        var style = window.getComputedStyle(fullPageElement);</span><br><span class="line">        var backgroundImage = style.backgroundImage;</span><br><span class="line">        //- console.log('Background image:', backgroundImage);</span><br><span class="line"></span><br><span class="line">        // 提取 URL，去除前5个字符和后2个字符</span><br><span class="line">        var imageUrl = backgroundImage.slice(5, -2);</span><br><span class="line">        //- console.log('Background image URL:', imageUrl);</span><br><span class="line"></span><br><span class="line">        if (imageUrl &amp;&amp; imageUrl !== 'none') {</span><br><span class="line">        var img = new Image();</span><br><span class="line">        img.crossOrigin = "anonymous"; // 如果有跨域问题，尝试添加这行</span><br><span class="line"></span><br><span class="line">        img.onload = function() {</span><br><span class="line">            //- console.log('Background image loaded.');</span><br><span class="line">            document.body.style.visibility = 'visible';</span><br><span class="line">            document.body.style.overflow = 'auto';</span><br><span class="line">        };</span><br><span class="line"></span><br><span class="line">        img.onerror = function() {</span><br><span class="line">            //- console.error('Failed to load background image.');</span><br><span class="line">            document.body.style.visibility = 'visible';</span><br><span class="line">            document.body.style.overflow = 'auto';</span><br><span class="line">        };</span><br><span class="line"></span><br><span class="line">        // 确保图片路径是正确的</span><br><span class="line">        img.src = imageUrl;</span><br><span class="line">        } else {</span><br><span class="line">        //- console.log('No background image found.');</span><br><span class="line">        document.body.style.visibility = 'visible';</span><br><span class="line">        document.body.style.overflow = 'auto';</span><br><span class="line">        }</span><br><span class="line">    } else {</span><br><span class="line">        //- console.log('No full-page element detected.');</span><br><span class="line">        document.body.style.visibility = 'visible';</span><br><span class="line">        document.body.style.overflow = 'auto';</span><br><span class="line">    }</span><br><span class="line">    };</span><br></pre></td></tr></table></figure><p>代码中有 <code>console.log</code>用来调试，取消注释后编译本地浏览打开首页，按F12进到终端，如果看到如下调试信息，则说明功能添加成功：</p><p><img src="/img/202501/4.png" alt="Image 4"></p><p>其中，<code>.full_page</code> 是首页的检测元素, <code>.post-bg</code>是文章页面的检测元素，如下图所示：</p><p><img src="/img/202501/7.png" alt="Image 7"></p><p><img src="/img/202501/8.png" alt="Image 8"></p><h1 id="方法2推荐">方法2（推荐）</h1><p>打开 <code>themes/butterfly/layout/includes/layout.pug</code>这个文件，在 <code>body</code>的最前面添加如下代码（这个和方法1是一样的）：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">body(style="visibility: hidden; overflow: hidden;")</span><br><span class="line"></span><br><span class="line">    !=partial('includes/loading/index', {}, {cache: true})</span><br></pre></td></tr></table></figure><p>然后跟着<a href="https://diraw.top/2025/01/04/Hexo/Butterfly/Custom/0/">Butterfly魔改准备工作：文件管理魔改代码</a>完成准备。</p><p>最后把之前的代码写成一个函数如下所示，把以下代码添加在<code>custom.js</code> 最后（最外层）：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">checkBackgroundImage</span>(<span class="params"></span>) {</span><br><span class="line">  <span class="variable language_">document</span>.<span class="property">body</span>.<span class="property">style</span>.<span class="property">visibility</span> = <span class="string">'hidden'</span>;</span><br><span class="line">  <span class="variable language_">document</span>.<span class="property">body</span>.<span class="property">style</span>.<span class="property">overflow</span> = <span class="string">'hidden'</span>;</span><br><span class="line">  <span class="keyword">var</span> fullPageElement = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">'.full_page, .post-bg'</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (fullPageElement) {</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">'Full-page element detected.'</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> style = <span class="variable language_">window</span>.<span class="title function_">getComputedStyle</span>(fullPageElement);</span><br><span class="line">    <span class="keyword">var</span> backgroundImage = style.<span class="property">backgroundImage</span>;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">'Background image:'</span>, backgroundImage);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 提取 URL，去除前5个字符和后2个字符</span></span><br><span class="line">    <span class="keyword">var</span> imageUrl = backgroundImage.<span class="title function_">slice</span>(<span class="number">5</span>, -<span class="number">2</span>);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">'Background image URL:'</span>, imageUrl);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (imageUrl &amp;&amp; imageUrl !== <span class="string">'none'</span>) {</span><br><span class="line">      <span class="keyword">var</span> img = <span class="keyword">new</span> <span class="title class_">Image</span>();</span><br><span class="line">      img.<span class="property">crossOrigin</span> = <span class="string">"anonymous"</span>; <span class="comment">// 如果有跨域问题，尝试添加这行</span></span><br><span class="line"></span><br><span class="line">      img.<span class="property">onload</span> = <span class="keyword">function</span>(<span class="params"></span>) {</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">'Background image loaded.'</span>);</span><br><span class="line">        <span class="variable language_">document</span>.<span class="property">body</span>.<span class="property">style</span>.<span class="property">visibility</span> = <span class="string">'visible'</span>;</span><br><span class="line">        <span class="variable language_">document</span>.<span class="property">body</span>.<span class="property">style</span>.<span class="property">overflow</span> = <span class="string">'auto'</span>;</span><br><span class="line">      };</span><br><span class="line"></span><br><span class="line">      img.<span class="property">onerror</span> = <span class="keyword">function</span>(<span class="params"></span>) {</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">'Failed to load background image.'</span>);</span><br><span class="line">        <span class="variable language_">document</span>.<span class="property">body</span>.<span class="property">style</span>.<span class="property">visibility</span> = <span class="string">'visible'</span>;</span><br><span class="line">        <span class="variable language_">document</span>.<span class="property">body</span>.<span class="property">style</span>.<span class="property">overflow</span> = <span class="string">'auto'</span>;</span><br><span class="line">      };</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 确保图片路径是正确的</span></span><br><span class="line">      img.<span class="property">src</span> = imageUrl;</span><br><span class="line">    } <span class="keyword">else</span> {</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">'No background image found.'</span>);</span><br><span class="line">      <span class="variable language_">document</span>.<span class="property">body</span>.<span class="property">style</span>.<span class="property">visibility</span> = <span class="string">'visible'</span>;</span><br><span class="line">      <span class="variable language_">document</span>.<span class="property">body</span>.<span class="property">style</span>.<span class="property">overflow</span> = <span class="string">'auto'</span>;</span><br><span class="line">    }</span><br><span class="line">  } <span class="keyword">else</span> {</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">'No full-page element detected.'</span>);</span><br><span class="line">    <span class="variable language_">document</span>.<span class="property">body</span>.<span class="property">style</span>.<span class="property">visibility</span> = <span class="string">'visible'</span>;</span><br><span class="line">    <span class="variable language_">document</span>.<span class="property">body</span>.<span class="property">style</span>.<span class="property">overflow</span> = <span class="string">'auto'</span>;</span><br><span class="line">  }</span><br><span class="line">}</span><br></pre></td></tr></table></figure><p>最后在<code>document.addEventListener('DOMContentLoaded', function () { })</code>里面（如果没有就创建一个）<strong>最前面</strong>添加<code>checkBackgroundImage();</code> 即可，如下代码所示：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">document</span>.<span class="title function_">addEventListener</span>(<span class="string">'DOMContentLoaded'</span>, <span class="keyword">function</span> (<span class="params"></span>) {</span><br><span class="line">  <span class="comment">// 其他代码</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// 初始检查背景图片</span></span><br><span class="line">  <span class="title function_">checkBackgroundImage</span>();</span><br><span class="line">});</span><br></pre></td></tr></table></figure><h1 id="注意">注意</h1><p>此篇教程只能实现刷新进入网站的时候执行功能，但是在网站页面之间进行跳转的时候却不起作用。</p><p>可能是如下原因：<br>1、单页应用（SPA）架构：页面之间的跳转实际上没有触发完整的页面加载，因此window.onload 事件不会再次触发。<br>2、浏览器缓存：浏览器可能缓存了图像或页面状态，导致 onload事件在页面跳转时不被触发。<br>3、JavaScript 框架的路由：使用 JavaScript框架进行路由时，页面跳转通常不会刷新整个页面。</p><p>搞了很久还是不行，以后再来吧。</p>]]></content>
      
      
      <categories>
          
          <category> 计算机 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> Butterfly </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo报错ssh: connect to host github.com port 22: Connection timed out解决办法</title>
      <link href="/2025/01/03/CS/Hexo/Error/1/"/>
      <url>/2025/01/03/CS/Hexo/Error/1/</url>
      
        <content type="html"><![CDATA[<p><code>hexo d</code> 报错ssh: connect to host github.com port 22:Connection timed out</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ssh: connect to host github.com port 22: Connection timed out</span><br><span class="line">fatal: Could not <span class="built_in">read</span> from remote repository.</span><br><span class="line"></span><br><span class="line">Please make sure you have the correct access rights</span><br><span class="line">and the repository exists.</span><br><span class="line">FATAL Something<span class="string">'s wrong. Maybe you can find the solution here: https://hexo.io/docs/troubleshooting.html</span></span><br><span class="line"><span class="string">Error: Spawn failed</span></span><br><span class="line"><span class="string">    at ChildProcess.&lt;anonymous&gt; (E:\Blog\node_modules\hexo-deployer-git\node_modules\hexo-util\lib\spawn.js:51:21)</span></span><br><span class="line"><span class="string">    at ChildProcess.emit (events.js:400:28)</span></span><br><span class="line"><span class="string">    at ChildProcess.cp.emit (E:\Blog\node_modules\cross-spawn\lib\enoent.js:34:29)</span></span><br><span class="line"><span class="string">    at Process.ChildProcess._handle.onexit (internal/child_process.js:285:12)  </span></span><br><span class="line"><span class="string">PS E:\Blog&gt; </span></span><br></pre></td></tr></table></figure><p>在命令行直接输入 <code>ssh -T git@github.com</code>连接GitHub，返回：<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">C:\Users\craft&gt;ssh -T git@github.com</span><br><span class="line">ssh: connect to host github.com port 22: Connection timed out</span><br></pre></td></tr></table></figure></p><p>如果 <code>hexo d</code>以前都是好的，今天突然抽风了，那应该不是ssh密钥的问题，而是端口被防火墙禁止访问了，我们尝试修改<code>~/.ssh/config</code> 使用443端口来访问：</p><ol type="1"><li>命令行 <code>cd %USERPROFILE%\.ssh</code></li><li><code>notepad config</code> 编辑 config 文件</li><li>在 notepad 中，输入以下内容：</li></ol><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Host github.com</span><br><span class="line">  Hostname ssh.github.com</span><br><span class="line">  Port 443</span><br></pre></td></tr></table></figure><p>然后，在命令行输入 <code>ssh -T git@github.com</code> 返回：<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">C:\Users\craft&gt;ssh -T git@github.com</span><br><span class="line">Hi Diraw! You<span class="string">'ve successfully authenticated, but GitHub does not provide shell access.</span></span><br></pre></td></tr></table></figure></p><p>然后再 <code>hexo d</code> 应该就没问题了。</p>]]></content>
      
      
      <categories>
          
          <category> 计算机 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> ssh </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Butterfly报错TypeError: coverVal.indexOf is not a function解决办法</title>
      <link href="/2025/01/02/CS/Hexo/Butterfly/Error/1/"/>
      <url>/2025/01/02/CS/Hexo/Butterfly/Error/1/</url>
      
        <content type="html"><![CDATA[<p>魔改了一下Butterfly的源代码之后 <code>hexo g</code>出现如下报错：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">TypeError: coverVal.indexOf is not a <span class="keyword">function</span></span><br><span class="line">    at Hexo.&lt;anonymous&gt; (E:\Blog\themes\butterfly\scripts\filters\random_cover.js:15:30)</span><br><span class="line">    at Hexo.tryCatcher (E:\Blog\node_modules\bluebird\js\release\util.js:16:23)</span><br><span class="line">    at Hexo.&lt;anonymous&gt; (E:\Blog\node_modules\bluebird\js\release\method.js:15:34)</span><br><span class="line">    at E:\Blog\node_modules\hexo\dist\extend\filter.js:58:67</span><br><span class="line">    at tryCatcher (E:\Blog\node_modules\bluebird\js\release\util.js:16:23)     </span><br><span class="line">    at Object.gotValue (E:\Blog\node_modules\bluebird\js\release\reduce.js:166:18)</span><br><span class="line">    at Object.gotAccum (E:\Blog\node_modules\bluebird\js\release\reduce.js:155:25)</span><br><span class="line">    at Object.tryCatcher (E:\Blog\node_modules\bluebird\js\release\util.js:16:23)</span><br><span class="line">    at Promise._settlePromiseFromHandler (E:\Blog\node_modules\bluebird\js\release\promise.js:547:31)</span><br><span class="line">    at Promise._settlePromise (E:\Blog\node_modules\bluebird\js\release\promise.js:604:18)</span><br><span class="line">    at Promise._settlePromise0 (E:\Blog\node_modules\bluebird\js\release\promise.js:649:10)</span><br><span class="line">    at Promise._settlePromises (E:\Blog\node_modules\bluebird\js\release\promise.js:729:18)</span><br><span class="line">    at _drainQueueStep (E:\Blog\node_modules\bluebird\js\release\async.js:93:12)</span><br><span class="line">    at _drainQueue (E:\Blog\node_modules\bluebird\js\release\async.js:86:9)    </span><br><span class="line">    at Async._drainQueues (E:\Blog\node_modules\bluebird\js\release\async.js:102:5)</span><br><span class="line">    at Immediate.Async.drainQueues [as _onImmediate] (E:\Blog\node_modules\bluebird\js\release\async.js:15:14)</span><br><span class="line">    at processImmediate (internal/timers.js:464:21)</span><br></pre></td></tr></table></figure><p>打开 <code>.\themes\butterfly\scripts\filters\random_cover.js</code>文件如下：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Butterfly</span></span><br><span class="line"><span class="comment"> * ramdom cover</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">'use strict'</span></span><br><span class="line"></span><br><span class="line">hexo.<span class="property">extend</span>.<span class="property">filter</span>.<span class="title function_">register</span>(<span class="string">'before_post_render'</span>, <span class="function"><span class="params">data</span> =&gt;</span> {</span><br><span class="line">  <span class="keyword">const</span> imgTestReg = <span class="regexp">/\.(png|jpe?g|gif|svg|webp)(\?.*)?$/i</span></span><br><span class="line">  <span class="keyword">let</span> { <span class="attr">cover</span>: coverVal, <span class="attr">top_img</span>: topImg } = data</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Add path to top_img and cover if post_asset_folder is enabled</span></span><br><span class="line">  <span class="keyword">if</span> (hexo.<span class="property">config</span>.<span class="property">post_asset_folder</span>) {</span><br><span class="line">    <span class="keyword">if</span> (topImg &amp;&amp; topImg.<span class="title function_">indexOf</span>(<span class="string">'/'</span>) === -<span class="number">1</span> &amp;&amp; imgTestReg.<span class="title function_">test</span>(topImg)) data.<span class="property">top_img</span> = <span class="string">`<span class="subst">${data.path}</span><span class="subst">${topImg}</span>`</span></span><br><span class="line">    <span class="keyword">if</span> (coverVal &amp;&amp; coverVal.<span class="title function_">indexOf</span>(<span class="string">'/'</span>) === -<span class="number">1</span> &amp;&amp; imgTestReg.<span class="title function_">test</span>(coverVal)) data.<span class="property">cover</span> = <span class="string">`<span class="subst">${data.path}</span><span class="subst">${coverVal}</span>`</span></span><br><span class="line">  }</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">randomCoverFn</span> = (<span class="params"></span>) =&gt; {</span><br><span class="line">    <span class="keyword">const</span> { <span class="attr">cover</span>: { <span class="attr">default_cover</span>: defaultCover } } = hexo.<span class="property">theme</span>.<span class="property">config</span></span><br><span class="line">    <span class="keyword">if</span> (!defaultCover) <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">    <span class="keyword">if</span> (!<span class="title class_">Array</span>.<span class="title function_">isArray</span>(defaultCover)) <span class="keyword">return</span> defaultCover</span><br><span class="line">    <span class="keyword">const</span> num = <span class="title class_">Math</span>.<span class="title function_">floor</span>(<span class="title class_">Math</span>.<span class="title function_">random</span>() * defaultCover.<span class="property">length</span>)</span><br><span class="line">    <span class="keyword">return</span> defaultCover[num]</span><br><span class="line">  }</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (coverVal === <span class="literal">false</span>) <span class="keyword">return</span> data</span><br><span class="line"></span><br><span class="line">  <span class="comment">// If cover is not set, use random cover</span></span><br><span class="line">  <span class="keyword">if</span> (!coverVal) {</span><br><span class="line">    <span class="keyword">const</span> randomCover = <span class="title function_">randomCoverFn</span>()</span><br><span class="line">    data.<span class="property">cover</span> = randomCover</span><br><span class="line">    coverVal = randomCover <span class="comment">// update coverVal</span></span><br><span class="line">  }</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (coverVal &amp;&amp; (coverVal.<span class="title function_">indexOf</span>(<span class="string">'//'</span>) !== -<span class="number">1</span> || imgTestReg.<span class="title function_">test</span>(coverVal))) {</span><br><span class="line">    data.<span class="property">cover_type</span> = <span class="string">'img'</span></span><br><span class="line">  }</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> data</span><br><span class="line">})</span><br></pre></td></tr></table></figure><p>将文件内容修改为：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Butterfly</span></span><br><span class="line"><span class="comment"> * random cover</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">'use strict'</span></span><br><span class="line"></span><br><span class="line">hexo.<span class="property">extend</span>.<span class="property">filter</span>.<span class="title function_">register</span>(<span class="string">'before_post_render'</span>, <span class="function"><span class="params">data</span> =&gt;</span> {</span><br><span class="line">  <span class="keyword">const</span> imgTestReg = <span class="regexp">/\.(png|jpe?g|gif|svg|webp)(\?.*)?$/i</span></span><br><span class="line">  <span class="keyword">let</span> { <span class="attr">cover</span>: coverVal, <span class="attr">top_img</span>: topImg } = data</span><br><span class="line">  <span class="keyword">const</span> postAssetFolder = hexo.<span class="property">config</span>.<span class="property">post_asset_folder</span></span><br><span class="line">  <span class="keyword">const</span> defaultCover = hexo.<span class="property">theme</span>.<span class="property">config</span>.<span class="property">cover</span>.<span class="property">default_cover</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// Cache random cover if needed</span></span><br><span class="line">  <span class="keyword">let</span> randomCover;</span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">randomCoverFn</span> = (<span class="params"></span>) =&gt; {</span><br><span class="line">    <span class="keyword">if</span> (!defaultCover) <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">    <span class="keyword">if</span> (!<span class="title class_">Array</span>.<span class="title function_">isArray</span>(defaultCover)) <span class="keyword">return</span> defaultCover</span><br><span class="line">    <span class="keyword">if</span> (!randomCover) {</span><br><span class="line">      <span class="keyword">const</span> num = <span class="title class_">Math</span>.<span class="title function_">floor</span>(<span class="title class_">Math</span>.<span class="title function_">random</span>() * defaultCover.<span class="property">length</span>)</span><br><span class="line">      randomCover = defaultCover[num]</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> randomCover</span><br><span class="line">  }</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Add path to top_img and cover if post_asset_folder is enabled</span></span><br><span class="line">  <span class="keyword">if</span> (postAssetFolder) {</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> topImg === <span class="string">'string'</span> &amp;&amp; topImg.<span class="title function_">indexOf</span>(<span class="string">'/'</span>) === -<span class="number">1</span> &amp;&amp; imgTestReg.<span class="title function_">test</span>(topImg)) {</span><br><span class="line">      data.<span class="property">top_img</span> = <span class="string">`<span class="subst">${data.path}</span><span class="subst">${topImg}</span>`</span></span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> coverVal === <span class="string">'string'</span> &amp;&amp; coverVal.<span class="title function_">indexOf</span>(<span class="string">'/'</span>) === -<span class="number">1</span> &amp;&amp; imgTestReg.<span class="title function_">test</span>(coverVal)) {</span><br><span class="line">      data.<span class="property">cover</span> = <span class="string">`<span class="subst">${data.path}</span><span class="subst">${coverVal}</span>`</span></span><br><span class="line">    }</span><br><span class="line">  }</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (coverVal === <span class="literal">false</span>) <span class="keyword">return</span> data</span><br><span class="line"></span><br><span class="line">  <span class="comment">// If cover is not set, use random cover</span></span><br><span class="line">  <span class="keyword">if</span> (!coverVal) {</span><br><span class="line">    <span class="keyword">const</span> randomCover = <span class="title function_">randomCoverFn</span>()</span><br><span class="line">    data.<span class="property">cover</span> = randomCover</span><br><span class="line">    coverVal = randomCover <span class="comment">// update coverVal</span></span><br><span class="line">  }</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> coverVal === <span class="string">'string'</span> &amp;&amp; (coverVal.<span class="title function_">indexOf</span>(<span class="string">'//'</span>) !== -<span class="number">1</span> || imgTestReg.<span class="title function_">test</span>(coverVal))) {</span><br><span class="line">    data.<span class="property">cover_type</span> = <span class="string">'img'</span></span><br><span class="line">  }</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> data</span><br><span class="line">})</span><br></pre></td></tr></table></figure><p>做的改动有：<br>1. <strong>变量声明优化</strong>：将 postAssetFolder 和 defaultCover单独提取出来，避免多次访问配置。<br>2. <strong>缓存随机封面</strong>：添加了 randomCover变量，用于缓存随机封面，避免重复计算。<br>3. <strong>类型检查</strong>：在使用 indexOf 之前，增加了对 topImg 和coverVal 的类型检查，确保它们是字符串。<br>4. <strong>逻辑优化</strong>：在 randomCoverFn 中，增加了对 randomCover的缓存检查，避免多次随机选择。</p>]]></content>
      
      
      <categories>
          
          <category> 计算机 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> Butterfly </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
